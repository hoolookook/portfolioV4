@charset "UTF-8";
@keyframes opLv {
	0%, 100% {
		opacity: 1;
	}
	20% {
		opacity: 0.8;
	}
	50% {
		opacity: 0.6;
	}
	80% {
		opacity: 0.8;
	}
}
@keyframes blink {
	0%, 100% {
		opacity: 1;
	}
	50% {
		opacity: 0;
	}
}
@media screen and (max-width: 469px) {
	#contents {
		height: 100% !important;
	}
	#contents .pageWrap {
		grid-template-columns: repeat(auto-fit, minmax(100%, 1fr));
		grid-template-rows: repeat(9, 100px);
		gap: 10px;
	}
}
@media screen and (min-width: 470px) and (max-width: 767px) {
	#contents .title h3 {
		width: 82px;
		overflow: hidden;
		font-size: 110px !important;
	}
	#contents .pageDetail {
		background-color: red;
	}
	#contents .pageDetail img {
		display: none;
		opacity: 1 !important;
	}
}
@media screen and (max-width: 1023px) {
	/* 타블렛 */
}
@media screen and (max-width: 767px) {
	/* 모바일 */
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
