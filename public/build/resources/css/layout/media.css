@keyframes opLv {
	0%, 100% {
		opacity: 1;
	}
	20% {
		opacity: 0.8;
	}
	50% {
		opacity: 0.6;
	}
	80% {
		opacity: 0.8;
	}
}
@keyframes blink {
	0%, 100% {
		opacity: 1;
	}
	50% {
		opacity: 0;
	}
}
@media screen and (max-width: 469px) {
	#intro .introWrap {
		font-size: 20px;
	}
	#intro .introWrap .typeText {
		font-size: 14px;
	}
	#intro .introWrap .typeText::after {
		font-size: 20px;
	}

	#header .navBar .navUl li {
		padding: 10px;
	}
	#header .navBar .navUl li a {
		font-size: 18px;
	}

	#contents {
		height: 100% !important;
	}
	#contents .pageWrap {
		grid-template-columns: repeat(auto-fit, minmax(50%, 1fr));
		grid-template-rows: repeat(9, 50px);
		gap: 20px;
	}
	#contents .pageWrap .page .title h3 {
		font-size: 20px;
	}

	#footer .profileWrap .profileL {
		justify-content: center;
	}
	#footer .profileWrap .profileL .profilePhoto img {
		width: 146px;
		height: 196px;
	}
	#footer .profileWrap .profileL .profileContact p {
		font-size: 12px;
	}
	#footer .profileWrap .profileL .profileContact p:last-child a {
		font-size: 12px;
	}
}
@media screen and (min-width: 468px) and (max-width: 767px) {
	#contents .pageWrap .page .title h3 {
		width: 82px;
		overflow: hidden;
		font-size: 110px;
	}
	#contents .pageWrap .page .pageDetail img {
		position: absolute;
		left: 50%;
		top: 50%;
		transform: translate(-50%, -50%);
	}
}
@media screen and (min-width: 500px) and (max-width: 680px) {
	#footer .profileWrap .profileR .skills p span {
		font-size: 12px;
	}
	#footer .profileWrap .profileR .skills .sphereChartWrap .sphere {
		width: 70px;
		height: 70px;
	}
	#footer .profileWrap .profileR .skills .sphereChartWrap .sphere .skillTitle strong {
		font-size: 6px;
	}
	#footer .profileWrap .profileR .skills .sphereChartWrap .sphere .center {
		font-size: 12px;
		width: 45px;
		height: 45px;
		line-height: 45px;
	}
}
@media screen and (max-width: 560px) {
	#contents .pageWrap .page .pageDetail .buttonWrap .openPdf {
		font-size: 11px;
	}
	#contents .pageWrap .page .pageDetail .buttonWrap .detailCard em {
		font-size: 11px;
	}
}
@media screen and (min-width: 100px) and (max-width: 500px) {
	#footer .profileWrap .profileR .skills p span {
		font-size: 12px;
	}
	#footer .profileWrap .profileR .skills .sphereChartWrap {
		width: 280px;
	}
	#footer .profileWrap .profileR .skills .sphereChartWrap .sphere {
		width: 70px;
		height: 70px;
	}
	#footer .profileWrap .profileR .skills .sphereChartWrap .sphere .skillTitle strong {
		font-size: 6px;
	}
	#footer .profileWrap .profileR .skills .sphereChartWrap .sphere .center {
		font-size: 12px;
		width: 45px;
		height: 45px;
		line-height: 45px;
	}
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
