@keyframes opLv {
	0%, 100% {
		opacity: 1;
	}
	20% {
		opacity: 0.8;
	}
	50% {
		opacity: 0.6;
	}
	80% {
		opacity: 0.8;
	}
}
@keyframes blink {
	0%, 100% {
		opacity: 1;
	}
	50% {
		opacity: 0;
	}
}
@media screen and (max-width: 767px) {
	#contents .pageWrap .page .title h3 {
		width: 82px;
		overflow: hidden;
		font-size: 110px;
	}
}
@media screen and (max-width: 481px) {
	#header .navBar {
		display: none;
	}
	#header .moBtn {
		display: block;
	}
}
@media screen and (max-width: 393px) {
	#contents .pageWrap {
		grid-template-columns: repeat(auto-fit, minmax(100%, 1fr));
		grid-template-rows: repeat(auto-fit, minmax(5%, 1fr));
	}
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UvY29tbW9uLnNjc3MiLCJsYXlvdXQvbWVkaWEuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvSEE7Q0FDRTtFQUVFOztDQUVGO0VBQ0U7O0NBRUY7RUFDRTs7Q0FFRjtFQUNFOzs7QUFHSjtDQUNFO0VBRUU7O0NBRUY7RUFDRTs7O0FDa0VKO0NBS1U7RUFDRTtFQUNBO0VBQ0E7OztBQTBCWjtDQUVJO0VBQ0U7O0NBRUY7RUFDRTs7O0FBSU47Q0FFSTtFQUNFO0VBQ0EiLCJmaWxlIjoibGF5b3V0L21lZGlhLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDpyb290IHtcclxuLy8gICAvLyBjb2xvclxyXG4vLyAgIC0tR3JlZW4xOiAjNTE5NDYyO1xyXG4vLyAgIC0tR3JlZW4yOiAjNDU3ZDUzO1xyXG4vLyAgIC0tR3JlZW4zOiAjMzY2MTQxO1xyXG4vLyAgIC0tR3JlZW40OiAjMGI1OTNkO1xyXG4vLyAgIC0tR3JlZW41OiAjMTc0YzM5O1xyXG4vLyAgIC0tYmxhY2sxOiAjMWMxYjE4O1xyXG4vLyAgIC0tYmxhY2syOiAjMjQyMjFmO1xyXG4vLyAgIC0tYmxhY2szOiAjMzAyZTJhO1xyXG4vLyAgIC0tZm9udEM6ICNjYWE2MjM7XHJcbi8vIH1cclxuJGZvbnRDOiAjY2FhNjIzO1xyXG4kR3JlZW4xOiAjNTE5NDYyO1xyXG4kR3JlZW4yOiAjNDU3ZDUzO1xyXG4kR3JlZW4zOiAjMzY2MTQxO1xyXG4kR3JlZW40OiAjMGI1OTNkO1xyXG4kR3JlZW41OiAjMTc0YzM5O1xyXG4kYmxhY2sxOiAjMWMxYjE4O1xyXG4kYmxhY2syOiAjMjQyMjFmO1xyXG4kYmxhY2szOiAjMzAyZTJhO1xyXG4kbWluV2lkdGg6IDI4MHB4O1xyXG4kYm9yZGVyOiAzcHggZGFzaGVkICRmb250QztcclxuXHJcbkBtaXhpbiBjb21tb25XcmFwKCR3aWR0aCwgJGhlaWdodCkge1xyXG4gIHdpZHRoOiAkd2lkdGg7XHJcbiAgaGVpZ2h0OiAkaGVpZ2h0O1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBmb250LWZhbWlseTogXCJKU0RvbmdrYW5nLVJlZ3VsYXJcIiwgc2Fucy1zZXJpZjtcclxuICBjb2xvcjogdmFyKC0tZm9udEMpO1xyXG59XHJcbkBtaXhpbiBjb21tb25Gb250KCRmb250U2l6ZSwgJGZvbnRDb2xvcikge1xyXG4gIGZvbnQtc2l6ZTogJGZvbnRTaXplO1xyXG4gIGNvbG9yOiAkZm9udENvbG9yO1xyXG59XHJcbkBtaXhpbiBjb21tb25GbGV4KCRmbGV4RiwgJGp1c3RpZnlDLCAkYWxpZ25JKSB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWZsb3c6ICRmbGV4RjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6ICRqdXN0aWZ5QztcclxuICBhbGlnbi1pdGVtczogJGFsaWduSTtcclxufVxyXG5AbWl4aW4gYm9yZGVyQkcoJGJhY2tncm91bmRDb2xvciwgJGJvcmRlckNvbG9yKSB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmRDb2xvcjtcclxuICBib3JkZXI6IDNweCBkYXNoZWQgJGJvcmRlckNvbG9yO1xyXG59XHJcbkBtaXhpbiBXSCgkd2lkdGgsICRoZWlnaHQpIHtcclxuICB3aWR0aDogJHdpZHRoO1xyXG4gIGhlaWdodDogJGhlaWdodDtcclxufVxyXG5cclxuQG1peGluIGZvb3RSYXRpbyhcclxuICAkZGl2aXNpb24sXHJcbiAgJHRleHREaXZpc2lvbixcclxuICAkQ2hhcnREaXZpc2lvbixcclxuICAkc21hbGxfZm9udFNpemUsXHJcbiAgJGJpZ19mb250U2l6ZVxyXG4pIHtcclxuICAjZm9vdGVyIHtcclxuICAgIC5wcm9maWxlV3JhcCB7XHJcbiAgICAgIC5wcm9maWxlTCB7XHJcbiAgICAgICAgLnByb2ZpbGVQaG90byB7XHJcbiAgICAgICAgICBpbWcge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSBXSChcclxuICAgICAgICAgICAgICBjYWxjKCRwcm9maWxlUGljVy8kZGl2aXNpb24pLFxyXG4gICAgICAgICAgICAgIGNhbGMoJHByb2ZpbGVQaWNILyRkaXZpc2lvbilcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLnByb2ZpbGVDb250YWN0IHtcclxuICAgICAgICAgIHAge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IGNhbGMoJHNtYWxsX2ZvbnRTaXplLyR0ZXh0RGl2aXNpb24pO1xyXG4gICAgICAgICAgICAmOmxhc3QtY2hpbGQge1xyXG4gICAgICAgICAgICAgIGEge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiBjYWxjKCRiaWdfZm9udFNpemUvJHRleHREaXZpc2lvbik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC5wcm9maWxlUiB7XHJcbiAgICAgICAgLnNraWxscyB7XHJcbiAgICAgICAgICBwIHtcclxuICAgICAgICAgICAgc3BhbiB7XHJcbiAgICAgICAgICAgICAgZm9udC1zaXplOiBjYWxjKCRiaWdfZm9udFNpemUvJHRleHREaXZpc2lvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC5zcGhlcmVDaGFydFdyYXAge1xyXG4gICAgICAgICAgICAuc3BoZXJlIHtcclxuICAgICAgICAgICAgICBAaW5jbHVkZSBXSChcclxuICAgICAgICAgICAgICAgIGNhbGMoJHNwaGVyZVdILyRDaGFydERpdmlzaW9uKSxcclxuICAgICAgICAgICAgICAgIGNhbGMoJHNwaGVyZVdILyRDaGFydERpdmlzaW9uKVxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgIC5za2lsbFRpdGxlIHtcclxuICAgICAgICAgICAgICAgIHN0cm9uZyB7XHJcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogY2FsYygkc21hbGxfZm9udFNpemUvJHRleHREaXZpc2lvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC5jZW50ZXIge1xyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgV0goXHJcbiAgICAgICAgICAgICAgICAgIGNhbGMoJGNlbnRlcldITC8kQ2hhcnREaXZpc2lvbiksXHJcbiAgICAgICAgICAgICAgICAgIGNhbGMoJGNlbnRlcldITC8kQ2hhcnREaXZpc2lvbilcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IGNhbGMoJGJpZ19mb250U2l6ZS8kdGV4dERpdmlzaW9uKTtcclxuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCRjZW50ZXJXSEwvJENoYXJ0RGl2aXNpb24pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4vLyBhbmltYXRpb24ga2V5ZnJhbWVzXHJcbkBrZXlmcmFtZXMgb3BMdiB7XHJcbiAgMCUsXHJcbiAgMTAwJSB7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gIH1cclxuICAyMCUge1xyXG4gICAgb3BhY2l0eTogMC44O1xyXG4gIH1cclxuICA1MCUge1xyXG4gICAgb3BhY2l0eTogMC42O1xyXG4gIH1cclxuICA4MCUge1xyXG4gICAgb3BhY2l0eTogMC44O1xyXG4gIH1cclxufVxyXG5Aa2V5ZnJhbWVzIGJsaW5rIHtcclxuICAwJSxcclxuICAxMDAlIHtcclxuICAgIG9wYWNpdHk6IDE7XHJcbiAgfVxyXG4gIDUwJSB7XHJcbiAgICBvcGFjaXR5OiAwO1xyXG4gIH1cclxufVxyXG4iLCJAaW1wb3J0IFwiLi4vYmFzZS9jb21tb24uc2Nzc1wiO1xyXG5cclxuLy8gQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDY5cHgpIHtcclxuLy8gICAjaW50cm8ge1xyXG4vLyAgICAgLmludHJvV3JhcCB7XHJcbi8vICAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuLy8gICAgICAgLnR5cGVUZXh0IHtcclxuLy8gICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbi8vICAgICAgICAgJjo6YWZ0ZXIge1xyXG4vLyAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgICAgLnNjcm9sbERvd24ge1xyXG4vLyAgICAgICBib3R0b206IDBweDtcclxuLy8gICAgICAgYSB7XHJcbi8vICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xyXG4vLyAgICAgICAgIGkge1xyXG4vLyAgICAgICAgICAgcGFkZGluZzogMTBweDtcclxuLy8gICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC43KTtcclxuLy8gICAgICAgICAgIGFuaW1hdGlvbjogYnViYmxlSGFsZiAzcyBlYXNlLWluIGluZmluaXRlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgIH1cclxuLy8gICAjaGVhZGVyIHtcclxuLy8gICAgIC5uYXZCYXIge1xyXG4vLyAgICAgICAubmF2VWwge1xyXG4vLyAgICAgICAgIGxpIHtcclxuLy8gICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XHJcbi8vICAgICAgICAgICBhIHtcclxuLy8gICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xyXG4vLyAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgIH1cclxuLy8gICAjY29udGVudHMge1xyXG4vLyAgICAgbWluLWhlaWdodDogNzAwcHggIWltcG9ydGFudDtcclxuLy8gICAgIC8vIG1pbi1oZWlnaHQ6IDAgIWltcG9ydGFudDtcclxuLy8gICAgIC8vIGhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xyXG4vLyAgICAgLnBhZ2VXcmFwIHtcclxuLy8gICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCg1MCUsIDFmcikpO1xyXG4vLyAgICAgICAvLyBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCg5LCA1MHB4KTtcclxuLy8gICAgICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoYXV0by1maXQsIDUwcHgpO1xyXG5cclxuLy8gICAgICAgZ2FwOiAyMHB4O1xyXG4vLyAgICAgICAucGFnZSB7XHJcbi8vICAgICAgICAgLnBhZ2VEZXRhaWwge1xyXG4vLyAgICAgICAgICAgLmJ1dHRvbldyYXAge1xyXG4vLyAgICAgICAgICAgICAuZmlyc3RCdG4ge1xyXG4vLyAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogJGJvcmRlcjtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAubGFzdEJ0biB7XHJcbi8vICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6ICRib3JkZXI7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgLm9wZW5QZGYge1xyXG4vLyAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuLy8gICAgICAgICAgICAgICB3aWR0aDogMTUlO1xyXG4vLyAgICAgICAgICAgICAgIHRleHQtaW5kZW50OiAtOTk5OXB4O1xyXG4vLyAgICAgICAgICAgICAgIHN2ZyB7XHJcbi8vICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbi8vICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuLy8gICAgICAgICAgICAgICAgIHRvcDogNTAlO1xyXG4vLyAgICAgICAgICAgICAgICAgbGVmdDogNTAlO1xyXG4vLyAgICAgICAgICAgICAgICAgd2lkdGg6IDE1cHg7XHJcbi8vICAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1cHg7XHJcbi8vICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuLy8gICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgJjpob3ZlciBzdmcge1xyXG4vLyAgICAgICAgICAgICAgICAgZmlsbDogdmFyKC0tYmxhY2syKTtcclxuLy8gICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgLmRldGFpbENhcmQge1xyXG4vLyAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC03MCUpO1xyXG4vLyAgICAgICAgICAgICAgIGVtIHtcclxuLy8gICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuLy8gICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgLnRpdGxlIHtcclxuLy8gICAgICAgICAgIGgzIHtcclxuLy8gICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4vLyAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgICAgLmNhdGVnb3J5IHtcclxuLy8gICAgICAgdG9wOiAwJTtcclxuLy8gICAgICAgZ2FwOiAxMHB4O1xyXG4vLyAgICAgICAuYnRuIHtcclxuLy8gICAgICAgICBmb250LXNpemU6IDE1cHg7XHJcbi8vICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gICB9XHJcbi8vICAgI2Zvb3RlciB7XHJcbi8vICAgICAucHJvZmlsZVdyYXAge1xyXG4vLyAgICAgICAucHJvZmlsZUwge1xyXG4vLyAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4vLyAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbi8vICAgICAgICAgLnByb2ZpbGVQaG90byB7XHJcbi8vICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogODBweDtcclxuLy8gICAgICAgICAgIGltZyB7XHJcbi8vICAgICAgICAgICAgIEBpbmNsdWRlIFdIKDE0NnB4LCAxOTZweCk7XHJcbi8vICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIC5wcm9maWxlQ29udGFjdCB7XHJcbi8vICAgICAgICAgICBwYWRkaW5nOiAwO1xyXG4vLyAgICAgICAgICAgcCB7XHJcbi8vICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcclxuLy8gICAgICAgICAgICAgJjpsYXN0LWNoaWxkIGEge1xyXG4vLyAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuLy8gQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNTAwcHgpIGFuZChtYXgtd2lkdGg6NjgwcHgpIHtcclxuLy8gICAjZm9vdGVyIHtcclxuLy8gICAgIC5wcm9maWxlV3JhcCB7XHJcbi8vICAgICAgIC5wcm9maWxlUiB7XHJcbi8vICAgICAgICAgLnNraWxscyB7XHJcbi8vICAgICAgICAgICBwIHtcclxuLy8gICAgICAgICAgICAgc3BhbiB7XHJcbi8vICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAuc3BoZXJlQ2hhcnRXcmFwIHtcclxuLy8gICAgICAgICAgICAgLnNwaGVyZSB7XHJcbi8vICAgICAgICAgICAgICAgQGluY2x1ZGUgV0goNzBweCwgNzBweCk7XHJcbi8vICAgICAgICAgICAgICAgLnNraWxsVGl0bGUge1xyXG4vLyAgICAgICAgICAgICAgICAgc3Ryb25nIHtcclxuLy8gICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiA2cHg7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgIC5jZW50ZXIge1xyXG4vLyAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xyXG4vLyAgICAgICAgICAgICAgICAgQGluY2x1ZGUgV0goNDVweCwgNDVweCk7XHJcbi8vICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogNDVweDtcclxuLy8gICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gICB9XHJcbi8vIH1cclxuLy8gQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTYwcHgpIHtcclxuLy8gICAjY29udGVudHMge1xyXG4vLyAgICAgLnBhZ2VXcmFwIHtcclxuLy8gICAgICAgLnBhZ2Uge1xyXG4vLyAgICAgICAgIC5wYWdlRGV0YWlsIHtcclxuLy8gICAgICAgICAgIC5idXR0b25XcmFwIHtcclxuLy8gICAgICAgICAgICAgLm9wZW5QZGYge1xyXG4vLyAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTFweDtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAuZGV0YWlsQ2FyZCB7XHJcbi8vICAgICAgICAgICAgICAgZW0ge1xyXG4vLyAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMXB4O1xyXG4vLyAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgIH1cclxuLy8gfVxyXG4vLyBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDBweCkgYW5kKG1heC13aWR0aDo1MDBweCkge1xyXG4vLyAgICNmb290ZXIge1xyXG4vLyAgICAgLnByb2ZpbGVXcmFwIHtcclxuLy8gICAgICAgLnByb2ZpbGVSIHtcclxuLy8gICAgICAgICAuc2tpbGxzIHtcclxuLy8gICAgICAgICAgIHAge1xyXG4vLyAgICAgICAgICAgICBzcGFuIHtcclxuLy8gICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgIH1cclxuLy8gICAgICAgICAgIC5zcGhlcmVDaGFydFdyYXAge1xyXG4vLyAgICAgICAgICAgICB3aWR0aDogMjgwcHg7XHJcbi8vICAgICAgICAgICAgIC5zcGhlcmUge1xyXG4vLyAgICAgICAgICAgICAgIEBpbmNsdWRlIFdIKDcwcHgsIDcwcHgpO1xyXG4vLyAgICAgICAgICAgICAgIC5za2lsbFRpdGxlIHtcclxuLy8gICAgICAgICAgICAgICAgIHN0cm9uZyB7XHJcbi8vICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogNnB4O1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAuY2VudGVyIHtcclxuLy8gICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcclxuLy8gICAgICAgICAgICAgICAgIEBpbmNsdWRlIFdIKDQ1cHgsIDQ1cHgpO1xyXG4vLyAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDQ1cHg7XHJcbi8vICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vICAgfVxyXG4vLyB9XHJcbi8vIG1haW4uanPsl5Ag7J2066aE67CU6r646riwIOyeiOydjFxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xyXG4gICNjb250ZW50cyB7XHJcbiAgICAucGFnZVdyYXAge1xyXG4gICAgICAucGFnZSB7XHJcbiAgICAgICAgLnRpdGxlIHtcclxuICAgICAgICAgIGgzIHtcclxuICAgICAgICAgICAgd2lkdGg6IDgycHg7XHJcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTEwcHg7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIC5wYWdlRGV0YWlsIHtcclxuICAgICAgICAvLyAgIGltZyB7XHJcbiAgICAgICAgLy8gICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAvLyAgICAgbGVmdDogNTAlO1xyXG4gICAgICAgIC8vICAgICB0b3A6IDUwJTtcclxuICAgICAgICAvLyAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgICAgICAgLy8gICB9XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMTk5cHgpIHtcclxufVxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5OTFweCkge1xyXG59XHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7XHJcbn1cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTc1cHgpIHtcclxufVxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0ODFweCkge1xyXG4gICNoZWFkZXIge1xyXG4gICAgLm5hdkJhciB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgICAubW9CdG4ge1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIH1cclxuICB9XHJcbn1cclxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzkzcHgpIHtcclxuICAjY29udGVudHMge1xyXG4gICAgLnBhZ2VXcmFwIHtcclxuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgxMDAlLCAxZnIpKTtcclxuICAgICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCg1JSwgMWZyKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDI5NHB4KSB7XHJcbn1cclxuIl19 */
